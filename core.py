# core.py
import os
from dotenv import load_dotenv
import telebot
import threading
import time
from datetime import datetime
from database.session import SessionLocal
from database.models import Reminder
from handlers.emp_info_handler import register_emp_info_menu_handler
from handlers.reminders_handler import (
    send_reminder_to_all, 
    calculate_next_send,
    save_reminder,
    request_reminder_schedule
)
from handlers.start_handler import register_start_handler
from handlers.menu_handler import register_menu_handlers
from handlers.admin_content_callback_handler import register_admin_content_callback_handlers
from handlers.analytics_handler import generate_users_report, generate_feedback_report, create_excel_file
from database.models import Admin
from handlers.admin_tour_handler import register_admin_tour_handlers
from handlers.info_handler import register_about_company_menu_handler
from handlers.upload_emp_handler import register_handlers
# –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç admin_content_handler, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
# from handlers.admin_content_handler import register_admin_content_callback_handlers

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')


bot = telebot.TeleBot(API_TOKEN)

def send_scheduled_reports(bot_instance):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ HR-–æ—Ç–¥–µ–ª—É"""
    while True:
        try:
            now = datetime.now()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 10:00 —É—Ç—Ä–∞
            if now.hour == 10 and now.minute == 0:
                db = SessionLocal()
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ HR
                    hr_admins = db.query(Admin).all()
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
                    users_report, users_data = generate_users_report()
                    feedback_report, feedback_data = generate_feedback_report()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    summary = (
                        "üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢\n\n"
                        f"{users_report}\n"
                        f"{feedback_report}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º HR
                    for admin in hr_admins:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
                            bot_instance.send_message(admin.auth_token, summary)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Å –¥–∞–Ω–Ω—ã–º–∏
                            excel_file, filename = create_excel_file(
                                users_data + feedback_data, 
                                f"report_{now.strftime('%Y%m%d')}.xlsx"
                            )
                            bot_instance.send_document(
                                admin.auth_token, 
                                excel_file, 
                                visible_file_name=filename
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É {admin.auth_token}: {e}")
                finally:
                    db.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        time.sleep(60)
        
def reminder_scheduler(bot_instance):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            now = datetime.now()
            db = SessionLocal()
            
            reminders = db.query(Reminder).filter(
                Reminder.next_send <= now,
                Reminder.is_active == True
            ).all()
            
            for reminder in reminders:
                try:
                    send_reminder_to_all(bot_instance, reminder.text)
                    
                    if reminder.is_recurring:
                        reminder.next_send = calculate_next_send(reminder.interval)
                    else:
                        reminder.is_active = False
                    
                    db.commit()
                except Exception as e:
                    print(f"Error processing reminder {reminder.id}: {e}")
                    db.rollback()
            
            db.close()
        except Exception as e:
            print(f"Error in reminder scheduler: {e}")
        finally:
            time.sleep(60)

if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_start_handler(bot)                 #—Å—Ç–∞—Ä—Ç
    register_about_company_menu_handler(bot)    #menu about comvpany
    register_admin_content_callback_handlers(bot)
    register_emp_info_menu_handler(bot)
    register_admin_tour_handlers(bot)
    register_handlers(bot)
    register_menu_handlers(bot)

    
    # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
    # register_admin_content_callback_handlers(bot)
    
    scheduler_thread = threading.Thread(
        target=reminder_scheduler, 
        args=(bot,),
        daemon=True
    )
    
    reports_thread = threading.Thread(
        target=send_scheduled_reports, 
        args=(bot,),
        daemon=True
    )
    reports_thread.start()
    scheduler_thread.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.infinity_polling()