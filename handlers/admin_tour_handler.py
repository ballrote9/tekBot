# handlers/admin_tour_handler.py

from telebot import types
from database.models import CompanyTour, User_info, TourRegistration
from database.session import SessionLocal
from datetime import datetime

from handlers.emp_info_handler import show_company_tours
from services.auth_check import require_auth

def register_admin_tour_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == "add_tour")
    @require_auth(bot)
    def request_tour_title(call):
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:")
        bot.register_next_step_handler(msg, request_tour_description)

    def request_tour_description(message):
        title = message.text.strip()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:")
        bot.register_next_step_handler(msg, request_tour_time, title)

    def request_tour_time(message, title):
        description = message.text.strip()
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.08.2025 10:00):")
        bot.register_next_step_handler(msg, request_tour_place, title, description)

    def request_tour_place(message, title, description):
        try:
            time = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å–±–æ—Ä–∞:")
        bot.register_next_step_handler(msg, save_tour, title, description, time)

    def save_tour(message, title, description, time):
        place = message.text.strip()
        db = SessionLocal()
        new_tour = CompanyTour(
            title=title,
            description=description,
            meeting_time=time,
            meeting_place=place
        )
        db.add(new_tour)
        db.commit()
        db.refresh(new_tour)
        bot.send_message(message.chat.id, "‚úÖ –≠–∫—Å–∫—É—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

        # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        users = db.query(User_info).all()
        for user in users:
            try:
                bot.send_message(
                    user.auth_token,
                    f"üì¢ –ù–æ–≤–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è: {title}\n"
                    f"üìÖ {time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç {place}\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
                )
            except:
                continue

    @bot.callback_query_handler(func=lambda call: call.data == "delete_tour")
    def show_tours_for_deletion(call):
        db = SessionLocal()
        try:
            tours = db.query(CompanyTour).filter(CompanyTour.is_active == True).all()

            if not tours:
                bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            markup = types.InlineKeyboardMarkup(row_width=1)
            for tour in tours:
                btn = types.InlineKeyboardButton(
                    f"üóë {tour.title} ({tour.meeting_time.strftime('%d.%m %H:%M')})",
                    callback_data=f"confirm_delete_tour:{tour.id}"
                )
                markup.add(btn)

            markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="company_tours"))

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        finally:
            db.close()

    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_tour:"))
    def confirm_delete_tour(call):
        try:
            tour_id = int(call.data.split(":")[1])
        except (ValueError, IndexError):
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
            return

        db = SessionLocal()
        try:
            tour = db.query(CompanyTour).filter_by(id=tour_id, is_active=True).first()
            if not tour:
                bot.answer_callback_query(call.id, "–≠–∫—Å–∫—É—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
                return

            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"do_delete_tour:{tour_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_tour")
            )

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é?\n\n"
                     f"üèõ <b>{tour.title}</b>\n"
                     f"üìÖ {tour.meeting_time.strftime('%d.%m.%Y %H:%M')}\n"
                     f"üìç {tour.meeting_place}\n\n"
                     f"–≠–∫—Å–∫—É—Ä—Å–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞, –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.",
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        finally:
            db.close()

    @bot.callback_query_handler(func=lambda call: call.data.startswith("do_delete_tour:"))
    def do_delete_tour(call):
        try:
            tour_id = int(call.data.split(":")[1])
        except (ValueError, IndexError):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
            return

        db = SessionLocal()
        try:
            # –ù–∞—Ö–æ–¥–∏–º —ç–∫—Å–∫—É—Ä—Å–∏—é
            tour = db.query(CompanyTour).filter_by(id=tour_id).first()
            if not tour:
                bot.answer_callback_query(call.id, "‚ùå –≠–∫—Å–∫—É—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —ç—Ç—É —ç–∫—Å–∫—É—Ä—Å–∏—é
            db.query(TourRegistration).filter_by(tour_id=tour_id).delete()

            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É —ç–∫—Å–∫—É—Ä—Å–∏—é
            db.delete(tour)
            db.commit()

            bot.answer_callback_query(call.id, "‚úÖ –≠–∫—Å–∫—É—Ä—Å–∏—è –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ—ë —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π
            show_company_tours(bot, call.message)

        except Exception as e:
            db.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏: {e}")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
        finally:
            db.close()
