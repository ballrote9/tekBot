from telebot import types

from database.session import SessionLocal
from services.auth_check import require_auth
from database.models import Content, ContentFile, UserTestProgress, CompanyTour, User_info, TourRegistration, Admin
from database.content_session import ContentSessionLocal  # –ò–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏ –ë–î
import os
from datetime import datetime
from handlers.feedback_handler import request_feedback_text, show_feedbacks, ask_feedback
from handlers.reminders_handler import (
    save_reminder,
    request_reminder_schedule,
    show_reminders_menu,
    request_reminder_text,
    show_scheduled_reminders,
    request_reminder_to_delete
)
from handlers.analytics_handler import (
    show_analytics_menu, 
    generate_users_report, 
    generate_feedback_report,
    generate_reminders_report,
    generate_tests_report,
    generate_content_report,
    create_excel_file  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è Excel
)
from services.content_service import show_content
from services.tour_service import tour_message_ids


def register_menu_handlers(bot):
    def handle_training_search_input(message):
        query = message.text.strip().lower()
        if len(query) < 2:
            bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return

        db = ContentSessionLocal()
        try:
            training_sections = [
                "training_materials_pdf",
                "training_materials_video", 
                "training_materials_presentation"
            ]

            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ–±—É—á–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
            results = db.query(Content).filter(
                Content.section.in_(training_sections)
            ).all()

            found_files = False
            for content in results:
                for file in content.files:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏)
                    file_name = os.path.basename(file.file_path).lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
                    if query in file_name:
                        if os.path.exists(file.file_path):
                            try:
                                with open(file.file_path, 'rb') as f:
                                    bot.send_document(
                                        message.chat.id,
                                        f,
                                        visible_file_name=os.path.basename(file.file_path)
                                    )
                                    found_files = True
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                        else:
                            print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file.file_path}")

            if not found_files:
                bot.send_message(message.chat.id, "‚ùå –í –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")
        finally:
            db.close()
            
    @bot.callback_query_handler(func=lambda call: call.data == "analytics_menu")
    @require_auth(bot)
    def handle_analytics_menu(call):
        show_analytics_menu(bot, call.message)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("report:"))
    @require_auth(bot)
    def handle_report_request(call):
        report_type = call.data.split(":")[1]
        
        if report_type == "users":
            report, excel_data = generate_users_report()
            bot.send_message(call.message.chat.id, report)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞
            excel_file, filename = create_excel_file(excel_data, "users_report.xlsx")
            bot.send_document(call.message.chat.id, excel_file, visible_file_name=filename)
            
        elif report_type == "feedback":
            report, excel_data = generate_feedback_report()
            bot.send_message(call.message.chat.id, report)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞
            excel_file, filename = create_excel_file(excel_data, "feedback_report.xlsx")
            bot.send_document(call.message.chat.id, excel_file, visible_file_name=filename)
        
        elif report_type == "reminders":
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
            report, data = generate_reminders_report()
            bot.send_message(call.message.chat.id, report)

            # —Å–æ–∑–¥–∞—ë–º Excel –∏ —à–ª—ë–º —Ñ–∞–π–ª
            excel_file, filename = create_excel_file(data, "reminders_report.xlsx")
            bot.send_document(call.message.chat.id, excel_file, visible_file_name=filename)
            
        elif report_type == "tests":
            report, excel_data = generate_tests_report()
            bot.send_message(call.message.chat.id, report)
            excel_file, filename = create_excel_file(excel_data, "tests_report.xlsx")
            bot.send_document(call.message.chat.id, excel_file, visible_file_name=filename)

        elif report_type == "content":
            report, excel_data = generate_content_report()
            bot.send_message(call.message.chat.id, report)
            excel_file, filename = create_excel_file(excel_data, "content_report.xlsx")
            bot.send_document(call.message.chat.id, excel_file, visible_file_name=filename)
            
    @bot.callback_query_handler(func=lambda call: call.data == "send_reminder")
    @require_auth(bot)
    def handle_send_reminder(call):
        request_reminder_text(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data == "configure_reminders")
    @require_auth(bot)
    def handle_configure_reminders(call):
        show_scheduled_reminders(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data == "delete_reminder_menu")
    @require_auth(bot)
    def handle_delete_reminder_menu(call):
        request_reminder_to_delete(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reminder_type:"))
    @require_auth(bot)
    def handle_reminder_type(call):
        parts = call.data.split(":", 2)
        r_type = parts[1]
        text = parts[2]
        
        if r_type == "instant":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if save_reminder(bot, text, is_instant=True):
                bot.send_message(call.message.chat.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            request_reminder_schedule(bot, call, text)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("reminder_interval:"))
    @require_auth(bot)
    def handle_reminder_interval(call):
        parts = call.data.split(":", 2)
        interval = parts[1]
        text = parts[2]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        if save_reminder(bot, text, interval=interval):
            bot.send_message(call.message.chat.id, f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ({interval})!")
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
    @bot.callback_query_handler(func=lambda call: call.data == "give_feedback")
    @require_auth(bot)
    def handle_give_feedback(call):
        request_feedback_text(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data == "view_feedbacks")
    @require_auth(bot)
    def handle_view_feedbacks(call):
        show_feedbacks(bot, call)

    @bot.callback_query_handler(func=lambda call: call.data == "take_quiz")
    @require_auth(bot)
    def handle_take_quiz(call):
        bot.send_message(call.message.chat.id, "üìù –û–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        ask_feedback(bot, call.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        
        
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_tests_section:"))
    @require_auth(bot)
    def handle_edit_tests(call):
        from handlers.tests_handler import show_edit_tests_menu
        show_edit_tests_menu(bot, call.message, call.from_user.id)
        bot.answer_callback_query(call.id)  # –í–∞–∂–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_test:"))
    @require_auth(bot)
    def handle_edit_test(call):
        test_id = int(call.data.split(":")[1])
        # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
        bot.send_message(call.message.chat.id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ ID: {test_id}")

    @bot.callback_query_handler(func=lambda call: call.data == "add_new_test")
    @require_auth(bot)
    def handle_add_new_test(call):
        # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞")
        
    @bot.callback_query_handler(func=lambda call: call.data.startswith("test_start:"))
    @require_auth(bot)
    def handle_test_start(call):
        from database.session import SessionLocal
        test_id = int(call.data.split(":")[1])
        db = SessionLocal()
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
        progress = db.query(UserTestProgress).filter(
            UserTestProgress.user_id == call.from_user.id,
            UserTestProgress.test_id == test_id
        ).first()
        
        if not progress:
            progress = UserTestProgress(
                user_id=call.from_user.id,
                test_id=test_id,
                completed=True,
                completed_at=datetime.now()
            )
            db.add(progress)
        elif not progress.completed:
            progress.completed = True
            progress.completed_at = datetime.now()
        
        db.commit()
        db.close()
        
        bot.answer_callback_query(call.id, "–¢–µ—Å—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π!")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("register_tour:"))
    @require_auth(bot)
    def handle_register_tour(call):
        tour_id = int(call.data.split(":")[1])
        user_token = str(call.from_user.id)

        db = SessionLocal()
        try:
            tour = db.query(CompanyTour).get(tour_id)

            if not tour:
                bot.answer_callback_query(call.id, "–≠–∫—Å–∫—É—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if len(tour.registrations) >= tour.max_participants:
                bot.answer_callback_query(call.id, "–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç")
                return

            existing = db.query(TourRegistration).filter(
                TourRegistration.tour_id == tour_id,
                TourRegistration.user_auth_token == user_token
            ).first()

            if existing:
                bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã")
                return

            registration = TourRegistration(
                tour_id=tour_id,
                user_auth_token=user_token
            )
            db.add(registration)
            db.commit()
            db.refresh(tour)

            bot.answer_callback_query(call.id, "–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!")
            bot.send_message(
                call.message.chat.id,
                f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ '{tour.title}' –≤ {tour.meeting_time.strftime('%d.%m.%Y %H:%M')}"
            )

            # ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
            count = db.query(TourRegistration).filter(
                TourRegistration.tour_id == tour_id
            ).count()

            chat_id = call.message.chat.id
            message_id = tour_message_ids.get((chat_id, tour_id))
            if message_id:
                updated_text = (
                    f"üèõ {tour.title}\n"
                    f"üïí {tour.meeting_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìç {tour.meeting_place}\n"
                    f"üìù {tour.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count} / {tour.max_participants}"
                )

                reg_button = types.InlineKeyboardButton(
                    "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                    callback_data=f"register_tour:{tour.id}"
                )
                tour_markup = types.InlineKeyboardMarkup()
                tour_markup.add(reg_button)

                try:
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=updated_text,
                        reply_markup=tour_markup
                    )
                except Exception as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


            admins = db.query(Admin).all()
            for admin in admins:
                try:
                    bot.send_message(
                        admin.auth_token,
                        f"üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é:\n"
                        f"üèõ {tour.title}\n"
                        f"üïí {tour.meeting_time.strftime('%d.%m.%Y %H:%M')}"
                    )
                except Exception as e:
                    print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin.auth_token}: {e}")

        except Exception as e:
            print(f"[REG ERROR] {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
        finally:
            db.close()

    @bot.callback_query_handler(func=lambda call: True)
    @require_auth(bot)
    def handle_callback(call):     
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_activity ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        from datetime import datetime
        from database.models import User
        from database.session import SessionLocal

        db = SessionLocal()
        user = db.query(User).filter(User.auth_token == str(call.from_user.id)).first()
        if user:
            user.last_activity = datetime.now()
            db.commit()
        db.close()
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        # --- –ü–æ–¥–º–µ–Ω—é "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" ---
        # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.auth_token == str(call.from_user.id)).first()
            if user:
                user.last_activity = datetime.now()
                db.commit()
        except:
            pass
        finally:
            db.close()
        

        # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        # FAQ
        if call.data == "faq":
            from handlers.faq_handler import show_faq_menu
            show_faq_menu(bot, call.message)
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        elif call.data == "feedback":
            from handlers.feedback_handler import ask_feedback
            ask_feedback(bot, call.message)
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        elif call.data == "support":
            from handlers.support_handler import show_support
            show_support(bot, call.message)
        # –ö–æ–Ω–µ—Ü –º–µ–Ω—é
        
        elif call.data == "contact_admin":
            markup = types.InlineKeyboardMarkup(row_width=1)
            uid = call.from_user.id
            is_admin = (
                db.query(Admin).filter(Admin.auth_token == uid).first() is not None
            )
            markup = types.InlineKeyboardMarkup(row_width=1)
            if is_admin:
                buttons = [ 
                    types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ", callback_data="contact_admin"),
                    types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]
            else:
                buttons = [
                    types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]

            markup.add(*buttons)
            show_content(bot, call, markup)

        elif call.data == "training_tests":
            from handlers.tests_handler import show_tests_menu
            show_tests_menu(bot, call.message, call.from_user.id)
            
        elif call.data == "training_categories":
            from handlers.training_materials import show_training_categories
            show_training_categories(bot, call)
    
        elif call.data == "training_search":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            bot.register_next_step_handler(call.message, handle_training_search_input)
            
        elif call.data.startswith("training_section:"):
            section = call.data.split(":", 1)[1]
            if section == "training_tests":
                from handlers.tests_handler import show_tests_menu
                show_tests_menu(bot, call.message, call.from_user.id)
            else:
                from handlers.training_materials import show_training_by_section
                show_training_by_section(bot, call, section)
            
        elif call.data == "faq_list":
            from handlers.faq_handler import show_question_list
            show_question_list(bot, call)

        elif call.data.startswith("faq_show:"):
            from handlers.faq_handler import show_question_detail
            question_id = int(call.data.split(":")[1])
            show_question_detail(bot, call, question_id)

        elif call.data == "faq_ask":
            from handlers.faq_handler import ask_question
            ask_question(bot, call.message)

        elif call.data == "faq_admin":
            from handlers.faq_handler import show_unanswered_questions
            show_unanswered_questions(bot, call)

        elif call.data.startswith("faq_admin_detail:"):
            from handlers.faq_handler import show_question_admin_options
            question_id = int(call.data.split(":")[1])
            show_question_admin_options(bot, call, question_id)

        elif call.data.startswith("faq_answer:"):
            from handlers.faq_handler import request_answer
            question_id = int(call.data.split(":")[1])
            request_answer(bot, call, question_id)

        elif call.data.startswith("faq_delete:"):
            from handlers.faq_handler import confirm_delete_question
            question_id = int(call.data.split(":")[1])
            confirm_delete_question(bot, call, question_id)

        elif call.data.startswith("faq_delete_confirm:"):
            from handlers.faq_handler import delete_question_handler
            question_id = int(call.data.split(":")[1])
            delete_question_handler(bot, call, question_id)

        elif call.data == "back_to_main":
            from handlers.start_handler import show_main_menu
            show_main_menu(bot, call.message)
        
        elif call.data == "greetings":
            from handlers.start_handler import greetings
            greetings(bot, call.message)
        
        else:
            bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
