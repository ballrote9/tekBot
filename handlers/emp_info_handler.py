from telebot import types
from database.content_session import ContentSessionLocal
from database.session import SessionLocal
from database.models import Admin, Content
from services.sections import SECTIONS
import os

def show_employee_info_menu(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    buttons = [
        types.InlineKeyboardButton("–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="training_materials"),
        types.InlineKeyboardButton("–≠–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="company_tours"),
        types.InlineKeyboardButton("–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è", callback_data="virtual_tour"),
        types.InlineKeyboardButton("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="org_structure"),
        types.InlineKeyboardButton("–°—Ç–æ–ª–æ–≤–∞—è", callback_data="canteen"),
        types.InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="corporate_events"),
        types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="document_filling"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]

    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        "üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.",
        reply_markup=markup
    )
def show_section(bot, message, section_name):
    section_info = SECTIONS.get(section_name, {})
    title = section_info.get("title", section_name.capitalize())
    description = section_info.get("description", section_name.capitalize())
    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏
    db= SessionLocal()
    if (db.query(Admin).filter(message.from_user.id == Admin.auth_token)):
        buttons.append(
            types.InlineKeyboardButton(
                f"–ò–∑–º–µ–Ω–∏—Ç—å ¬´{title}¬ª",
                callback_data=f"edit_section:{section_name}"
            )
        )
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        f"{description}",
        reply_markup=markup
    )
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ë–î
    db= ContentSessionLocal()
    content = db.query(Content).filter(Content.section == section_name).first()

    if content:
        if content.title or content.text:
            bot.send_message(message.chat.id, f"üíé {content.title}\n\n{content.text}")
        for file in content.files:
            if os.path.exists(file.file_path):
                with open(file.file_path, "rb") as f:
                    bot.send_document(message.chat.id, f)
    else:
        bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    db.close()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é ---
def show_training_materials(bot, message):
    bot.send_message(message.chat.id, "üìö –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –≤–∏–¥–µ–æ, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç—ã.")


def show_company_tours(bot, message):
    bot.send_message(message.chat.id, "üöå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏.")

def show_virtual_tour(bot, message):
    show_section(bot, message, "virtual_tour")

def show_organizational_structure(bot, message):
    show_section(bot, message, "structure")

def show_canteen_info(bot, message):
    show_section(bot, message, "canteen")

def show_corporate_events(bot, message):
    show_section(bot, message, "events")

def show_document_filling(bot, message):
    show_section(bot, message, "documents")
