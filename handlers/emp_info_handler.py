from telebot import types
from database.content_session import ContentSessionLocal
from database.session import SessionLocal
from database.models import Admin, Content, CompanyTour
from handlers.analytics_handler import show_analytics_menu
from handlers.reminders_handler import show_reminders_menu
from handlers.tour_handler import tour_message_ids
from services.auth_check import require_auth
from services.content_service import show_content
from services.sections import SECTIONS
import os

def show_employee_info_menu(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    user_id = message.from_user.id
    db = SessionLocal()
    is_admin = db.query(Admin).filter(Admin.auth_token == str(user_id)).first() is not None
    db.close()
    buttons = [
        types.InlineKeyboardButton("–û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="training_materials"),
        types.InlineKeyboardButton("–≠–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="company_tours"),
        types.InlineKeyboardButton("–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è", callback_data="virtual_tour"),
        types.InlineKeyboardButton("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="structure"),
        types.InlineKeyboardButton("–°—Ç–æ–ª–æ–≤–∞—è", callback_data="canteen"),
        types.InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events"),
        types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="documents"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]
    if is_admin:
        buttons.append(types.InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders"))
        buttons.append(types.InlineKeyboardButton("üìä –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", callback_data="analytics_menu"))  
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        "üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.",
        reply_markup=markup
    )
    
def show_section(bot, message, section_name):
    section_info = SECTIONS.get(section_name, {})
    title = section_info.get("title", section_name.capitalize())
    description = section_info.get("description", section_name.capitalize())
    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏
    db= SessionLocal()
    if (db.query(Admin).filter(message.from_user.id == Admin.auth_token).first()):
        buttons.append(
            types.InlineKeyboardButton(
                f"–ò–∑–º–µ–Ω–∏—Ç—å ¬´{title}¬ª",
                callback_data=f"edit_section:{section_name}:training"
            )
        )
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        f"{description}",
        reply_markup=markup
    )
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ë–î
    db= ContentSessionLocal()
    content = db.query(Content).filter(Content.section == section_name).first()

    if content:
        if content.title or content.text:
            bot.send_message(message.chat.id, f"üíé {content.title}\n\n{content.text}")
        for file in content.files:
            if os.path.exists(file.file_path):
                with open(file.file_path, "rb") as f:
                    bot.send_document(message.chat.id, f)
    else:
        bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    db.close()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é ---
from handlers.training_materials import show_training_menu
def show_training_materials(bot, message):
    show_training_menu(bot, message)

def show_company_tours(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]
    db = SessionLocal()
    user_id = str(message.from_user.id)
    is_admin = db.query(Admin).filter(Admin.auth_token == str(user_id)).first()
    if is_admin is not None:
        buttons.append(
            types.InlineKeyboardButton(
                "–î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é",
                callback_data="add_tour"
            )
        )
        buttons.append(
            types.InlineKeyboardButton(
                "–£–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é",
                callback_data="delete_tour"
            )
        )

    markup.add(*buttons)
    bot.send_message(message.chat.id, "üöå –≠–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é", reply_markup=markup)

    tours = db.query(CompanyTour).filter(CompanyTour.is_active == True).all()

    if not tours:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π")
        return
    for tour in tours:
        text = f"üèõ {tour.title}\n" \
               f"üïí {tour.meeting_time.strftime('%d.%m.%Y %H:%M')}\n" \
               f"üìç {tour.meeting_place}\n" \
               f"üìù {tour.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n" \
               f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tour.registrations)} / {tour.max_participants}"

        reg_button = types.InlineKeyboardButton(
            "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"register_tour:{tour.id}"
        )
        tour_markup = types.InlineKeyboardMarkup()
        tour_markup.add(reg_button)

        sent = bot.send_message(message.chat.id, text, reply_markup=tour_markup)
        tour_message_ids[(message.chat.id, tour.id)] = sent.message_id


    

def register_emp_info_menu_handler(bot):
    # –õ–æ–≤–∏—Ç –∫–æ–ª–±–µ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–æ–¥–º–µ–Ω—é "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
    callbacks = ["training_materials", "company_tours", "virtual_tour", "structure",
                 "canteen",  "events", "documents", "reminders", "analytics_menu", "training"]
    @bot.callback_query_handler(func=lambda call: call.data in callbacks)
    @require_auth(bot)
    def callback_handler(call):
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = []
        db = SessionLocal()
        if (db.query(Admin).filter(call.message.from_user.id == Admin.auth_token).first()):
            buttons.append(types.InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f'edit_section:{call.data}:training'))
            buttons.append(types.InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data='training'))
        markup.add(*buttons)
        
        if call.data == "training":
            show_employee_info_menu(bot, call.message)
        
        elif call.data == "training_materials":
            show_training_menu(bot, call.message)
        
        elif call.data == "company_tours":
            show_company_tours(bot, call.message)

        elif call.data == "reminders":
            show_reminders_menu(bot, call.message)
        
        elif call.data == "analytics_menu":
            show_analytics_menu(bot, call.message)

        else:
            show_content(bot, call, markup)