# handlers/upload_emp_handler.py

import os
import pandas as pd
import hashlib
import secrets
import datetime
from database.models import User, User_info
from database.session import SessionLocal  # –¢–≤–æ—è —Å–µ—Å—Å–∏—è
from telebot import TeleBot
from telebot.types import CallbackQuery, Message
import openpyxl  # –î–ª—è –∑–∞–ø–∏—Å–∏ Excel

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–∞—Ä–æ–ª—è–º–∏
PASSWORDS_FILE = "data/user_pass.xlsx"

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è ---
def generate_password(length=8):
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è auth_token ---
def generate_auth_token():
    return secrets.token_urlsafe(64)[:64]  # –†–æ–≤–Ω–æ 64 —Å–∏–º–≤–æ–ª–∞

# --- –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è ---
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

# --- FSM: –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
waiting_for_excel = {}  # user_id ‚Üí True, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª

# --- –§—É–Ω–∫—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ Excel ---
def save_passwords_to_excel(passwords_list):
    os.makedirs("data", exist_ok=True)
    df_existing = pd.DataFrame()
    if os.path.exists(PASSWORDS_FILE):
        df_existing = pd.read_excel(PASSWORDS_FILE)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ DataFrame
    df_new = pd.DataFrame(passwords_list)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–º–∏ –∂–µ email, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    if not df_existing.empty:
        df_combined = df_existing.set_index("mail")
        df_new = df_new.set_index("mail")
        df_combined.update(df_new)
        df_combined = pd.concat([
            df_new[~df_new.index.isin(df_combined.index)],
            df_combined
        ])
        df_combined = df_combined.reset_index()
    else:
        df_combined = df_new.reset_index(drop=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    df_combined.to_excel(PASSWORDS_FILE, index=False)
    return PASSWORDS_FILE


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_handlers(bot: TeleBot):
    @bot.callback_query_handler(func=lambda call: call.data == "upload_staff")
    def upload_staff_handler(call: CallbackQuery):
        bot.send_message(
            call.message.chat.id,
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.\n"
            "–û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: `name`, `mail`, `office`, `officephone`."
        )
        waiting_for_excel[call.from_user.id] = True
        bot.answer_callback_query(call.id)

    @bot.message_handler(content_types=['document'], func=lambda m: m.from_user.id in waiting_for_excel)
    def handle_excel_file(message: Message):
        user_id = message.from_user.id
        if not waiting_for_excel.get(user_id):
            return

        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥
        del waiting_for_excel[user_id]

        file_info = bot.get_file(message.document.file_id)
        file_name = message.document.file_name

        if not file_name.endswith(('.xlsx', '.xls')):
            bot.send_message(message.chat.id, "‚ùå –û–∂–∏–¥–∞–ª—Å—è —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls).")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded = bot.download_file(file_info.file_path)
        temp_path = f"temp_upload_{user_id}.xlsx"
        with open(temp_path, 'wb') as f:
            f.write(downloaded)

        session = SessionLocal()
        new_credentials = []  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: mail, password

        try:
            df = pd.read_excel(temp_path)
            required = {'name', 'mail', 'office', 'officephone'}
            if not required.issubset(df.columns):
                bot.send_message(message.chat.id,
                                 f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤. –ù—É–∂–Ω—ã: {required}\n"
                                 f"–í —Ñ–∞–π–ª–µ: {list(df.columns)}")
                os.remove(temp_path)
                return

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df['mail'] = df['mail'].astype(str).str.strip().str.lower()
            df = df.dropna(subset=['mail'])
            df = df[df['mail'] != 'nan']
            df = df.drop_duplicates(subset='mail', keep='first')

            # –í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –ë–î
            existing_users = session.query(User_info).all()
            existing_map = {u.mail.lower(): u for u in existing_users if u.mail}

            added = 0
            updated = 0
            deleted = 0

            # --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ---
            for _, row in df.iterrows():
                mail = row['mail']
                name = str(row['name']).strip()
                office = str(row['office']).strip() if pd.notna(row['office']) else None
                officephone = str(row['officephone']).strip() if pd.notna(row['officephone']) else None

                if mail in existing_map:
                    # –û–±–Ω–æ–≤–ª—è–µ–º
                    user_info = existing_map[mail]
                    user = session.query(User).filter(User.auth_token == user_info.auth_token).first()

                    user_info.full_name = name
                    user_info.office = office
                    user_info.officephone = officephone
                    user_info.mail = mail

                    if user:
                        user.last_activity = datetime.datetime.now()

                    session.add(user_info)
                    session.add(user)
                    updated += 1

                    del existing_map[mail]  # –£–±–∏—Ä–∞–µ–º –∏–∑ "—É–¥–∞–ª—è–µ–º—ã—Ö"

                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
                    auth_token = generate_auth_token()
                    password = generate_password()
                    hashed = hash_password(password)

                    # –°–æ–∑–¥–∞—ë–º User
                    new_user = User(
                        auth_token=auth_token,
                        hash_pass=hashed,
                        is_authorized=False,
                        created_at=datetime.datetime.now(),
                        last_activity=datetime.datetime.now()
                    )
                    session.add(new_user)

                    # –°–æ–∑–¥–∞—ë–º User_info
                    new_user_info = User_info(
                        auth_token=auth_token,
                        full_name=name,
                        mail=mail,
                        office=office,
                        officephone=officephone
                    )
                    session.add(new_user_info)

                    session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    new_credentials.append({
                        "full_name": name,
                        "mail": mail,
                        "password": password,
                        "auth_token": auth_token
                    })

                    added += 1

            # --- 2. –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–æ–ª–µ–Ω–Ω—ã—Ö ---
            for user_info in existing_map.values():
                session.query(User).filter(User.auth_token == user_info.auth_token).delete()
                session.delete(user_info)
                deleted += 1

            session.commit()

            # --- 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª–∏ –≤ Excel ---
            if new_credentials:
                save_passwords_to_excel(new_credentials)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª—è–º–∏
                with open(PASSWORDS_FILE, 'rb') as f:
                    bot.send_document(
                        message.chat.id,
                        f,
                        caption="üîê –ù–æ–≤—ã–µ –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
                    )
            else:
                bot.send_message(message.chat.id, "üîê –ù–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

            # --- –û—Ç–≤–µ—Ç ---
            bot.send_message(
                message.chat.id,
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n"
                f"üóë –£–¥–∞–ª–µ–Ω–æ (—É–≤–æ–ª–µ–Ω–Ω—ã–µ): {deleted}"
            )

        except Exception as e:
            session.rollback()
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            print(f"Error: {e}")
        finally:
            session.close()
            if os.path.exists(temp_path):
                os.remove(temp_path)