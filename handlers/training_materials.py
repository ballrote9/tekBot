from telebot import types
from database.content_session import ContentSessionLocal
from database.session import SessionLocal
from database.models import Content
from database.models import Admin, Content
import os

def show_training_menu(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    user_id = message.from_user.id
    db = SessionLocal()
    is_admin = db.query(Admin).filter(Admin.auth_token == str(user_id)).first() is not None
    db.close()

    buttons = []
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    buttons.append(types.InlineKeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="training_categories"))

    # –ü–æ–∏—Å–∫
    buttons.append(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="training_search"))

    # –¢–µ—Å—Ç—ã
    buttons.append(types.InlineKeyboardButton("üìù –¢–µ—Å—Ç—ã", callback_data="training_section:training_tests"))
    #if is_admin:
    buttons.append(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´üìù –¢–µ—Å—Ç—ã¬ª", callback_data="edit_tests_section:training_tests"))

    markup.add(*buttons)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ ‚Äî –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="training"))

    bot.send_message(
        message.chat.id,
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

def show_training_by_section(bot, call, section_name):
    db = ContentSessionLocal()
    content = db.query(Content).filter(Content.section == section_name).first()
    if not content:
        bot.send_message(call.message.chat.id, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    text = f"üìò {content.title}\n\n{content.text}" if content.title or content.text else "üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:"
    bot.send_message(call.message.chat.id, text)

    for file in content.files:
        if os.path.exists(file.file_path):
            with open(file.file_path, "rb") as f:
                bot.send_document(call.message.chat.id, f)
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file.file_path}")
            
user_search_state = {}    

def ask_training_search(bot, message):
    bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    user_search_state[message.from_user.id] = True

def show_training_categories(bot, call):
    # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: PDF, –í–∏–¥–µ–æ, –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    categories = [
        ("üìÑ PDF", "training_materials_pdf"),
        ("üé• –í–∏–¥–µ–æ", "training_materials_video"),
        ("üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "training_materials_presentation"),
    ]
    
    for label, callback in categories:
        markup.add(types.InlineKeyboardButton(label, callback_data=f"training_section:{callback}"))

    db = SessionLocal()
    user_id = call.from_user.id
    if db.query(Admin).filter(Admin.auth_token == str(user_id)).first():
        for label, callback in categories:
            # training_materials_pdf ‚Üí pdf
            subcategory = callback.replace("training_materials_", "")
            markup.add(types.InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ¬´{label}¬ª", callback_data=f"edit_section:{callback}:training_materials"))

    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="training"))

    bot.send_message(
        call.message.chat.id,
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
        reply_markup=markup
    )
    
               

