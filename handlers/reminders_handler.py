from telebot import types
from database.session import SessionLocal
from database.models import Reminder, User
from datetime import datetime, timedelta
import re

def save_reminder(bot, text, interval=None, is_instant=False):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        reminder = Reminder(
            text=text,
            is_recurring=bool(interval),
            interval=interval
        )
        
        if is_instant:
            send_reminder_to_all(bot, text)
            reminder.next_send = datetime.now()
        else:
            reminder.next_send = calculate_next_send(interval)
        
        db.add(reminder)
        db.commit()
        return True
    except Exception as e:
        print(f"Error saving reminder: {e}")
        return False
    finally:
        db.close()

def request_reminder_schedule(bot, call, text):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data=f"reminder_interval:daily:{text}"),
        types.InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data=f"reminder_interval:weekly:{text}"),
        types.InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data=f"reminder_interval:monthly:{text}"),
        types.InlineKeyboardButton("–ö–∞–∂–¥—ã–π —á–∞—Å", callback_data=f"reminder_interval:hourly:{text}")
    )
    
    bot.send_message(
        call.message.chat.id,
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=markup
    )
    
def show_reminders_menu(bot, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    buttons = [
        types.InlineKeyboardButton("üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="send_reminder"),
        types.InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="configure_reminders"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="training")
    ]
    
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ.",
        reply_markup=markup
    )

def request_reminder_text(bot, call):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    bot.register_next_step_handler(call.message, lambda m: process_reminder_text(bot, m))

def process_reminder_text(bot, message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–∏–ø"""
    text = message.text.strip()
    if len(text) < 5:
        bot.send_message(message.chat.id, "‚ùå –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤")
        return request_reminder_text(bot, message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    bot.reply_to(message, "‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üîî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"reminder_type:instant:{text}"),
        types.InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reminder_type:scheduled:{text}"),
        types.InlineKeyboardButton("üîÑ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–≤—Ç–æ—Ä", callback_data=f"reminder_type:recurring:{text}")
    )
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=markup
    )

def request_reminder_schedule(bot, call, text):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data=f"reminder_interval:daily:{text}"),
        types.InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data=f"reminder_interval:weekly:{text}"),
        types.InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data=f"reminder_interval:monthly:{text}"),
        types.InlineKeyboardButton("–ö–∞–∂–¥—ã–π —á–∞—Å", callback_data=f"reminder_interval:hourly:{text}")
    )
    
    bot.send_message(
        call.message.chat.id,
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=markup
    )

def save_reminder(bot, text, interval=None, is_instant=False):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        reminder = Reminder(
            text=text,
            is_recurring=bool(interval),
            interval=interval
        )
        
        if is_instant:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            send_reminder_to_all(bot, text)
            reminder.next_send = datetime.now()
        else:
            # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            reminder.next_send = calculate_next_send(interval)
        
        db.add(reminder)
        db.commit()
        return True
    except Exception as e:
        print(f"Error saving reminder: {e}")
        return False
    finally:
        db.close()

def send_reminder_to_all(bot, text):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    db = SessionLocal()
    try:
        # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
        users = db.query(User).filter(User.is_authorized == True).all()
        for user in users:
            try:
                bot.send_message(user.auth_token, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{text}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.auth_token}: {e}")
    finally:
        db.close()

def calculate_next_send(interval):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    now = datetime.now()
    if interval == "daily":
        return now + timedelta(days=1)
    elif interval == "weekly":
        return now + timedelta(weeks=1)
    elif interval == "monthly":
        # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Å—è—Ü–∞
        return now + timedelta(days=30)
    elif interval == "hourly":
        return now + timedelta(hours=1)
    return now

def show_scheduled_reminders(bot, call):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db = SessionLocal()
    try:
        reminders = db.query(Reminder).filter(Reminder.is_active == True).all()
        
        if not reminders:
            bot.send_message(call.message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
            
        response = "‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for reminder in reminders:
            status = "üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è" if reminder.is_recurring else "‚è±Ô∏è –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ"
            interval = f"({reminder.interval})" if reminder.interval else ""
            response += (
                f"üìù {reminder.text[:50]}...\n"
                f"üÜî ID: {reminder.id} | {status} {interval}\n"
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {reminder.next_send.strftime('%d.%m.%Y %H:%M')}\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="delete_reminder_menu"),
            types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="reminders_menu")
        )
        
        bot.send_message(call.message.chat.id, response, reply_markup=markup)
    finally:
        db.close()

def request_reminder_to_delete(bot, call):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(call.message, lambda m: delete_reminder(bot, m))

def delete_reminder(bot, message):
    """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"""
    try:
        reminder_id = int(message.text.strip())
        db = SessionLocal()
        reminder = db.query(Reminder).get(reminder_id)
        
        if reminder:
            db.delete(reminder)
            db.commit()
            bot.send_message(message.chat.id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {reminder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
    finally:
        db.close()