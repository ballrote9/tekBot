from telebot import types
from database.session import SessionLocal
from database.models import Admin
from services.faq_service import (
    add_question, 
    get_answered_questions,
    get_unanswered_questions,
    answer_question,
    delete_question,
    get_question_by_id
)

def show_faq_menu(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    buttons = [
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="faq_list"),
        types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="faq_ask"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    db = SessionLocal()
    user_id = message.from_user.id
    is_admin = db.query(Admin).filter(Admin.auth_token == str(user_id)).first() is not None
    db.close()

    #if is_admin:
    buttons.append(types.InlineKeyboardButton("üõ† –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq_admin"))

    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

def show_question_list(bot, call):
    questions = get_answered_questions()
    
    if not questions:
        bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for question in questions:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏
        btn_text = question.question[:30] + '...' if len(question.question) > 30 else question.question
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"faq_show:{question.id}"))
    
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="faq"))
    
    bot.send_message(call.message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

def show_question_detail(bot, call, question_id):
    question = get_question_by_id(question_id)
    
    if not question or not question.answer:
        bot.send_message(call.message.chat.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω.")
        return
    
    response = f"‚ùì *–í–æ–ø—Ä–æ—Å:*\n{question.question}\n\n"
    response += f"üí° *–û—Ç–≤–µ—Ç:*\n{question.answer}\n\n"
    response += f"üïí *–û—Ç–≤–µ—á–µ–Ω–æ:* {question.answered_at.strftime('%d.%m.%Y %H:%M')}"
    
    bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

def ask_question(bot, message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, lambda m: process_question(bot, m))

def process_question(bot, message):
    user_id = message.from_user.id
    question_text = message.text.strip()
    
    if not question_text:
        bot.send_message(message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    add_question(user_id, question_text)
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

def show_unanswered_questions(bot, call):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = SessionLocal()
    is_admin = db.query(Admin).filter(Admin.auth_token == str(call.from_user.id)).first() is not None
    db.close()
    
    if not is_admin:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    questions = get_unanswered_questions()
    
    if not questions:
        bot.send_message(call.message.chat.id, "üéâ –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for question in questions:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏
        btn_text = question.question[:30] + '...' if len(question.question) > 30 else question.question
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=f"faq_admin_detail:{question.id}"))
    
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="faq"))
    
    bot.send_message(call.message.chat.id, "‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=markup)

def show_question_admin_options(bot, call, question_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = SessionLocal()
    is_admin = db.query(Admin).filter(Admin.auth_token == str(call.from_user.id)).first() is not None
    db.close()
    
    if not is_admin:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"faq_answer:{question_id}"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"faq_delete:{question_id}"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="faq_admin")
    )
    
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def request_answer(bot, call, question_id):
    bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(call.message, lambda m: process_answer(bot, m, question_id))

def process_answer(bot, message, question_id):
    answer_text = message.text.strip()
    
    if not answer_text:
        bot.send_message(message.chat.id, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if answer_question(question_id, answer_text):
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def confirm_delete_question(bot, call, question_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"faq_delete_confirm:{question_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"faq_admin_detail:{question_id}")
    )
    
    bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?", reply_markup=markup)

def delete_question_handler(bot, call, question_id):
    if delete_question(question_id):
        bot.send_message(call.message.chat.id, "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")