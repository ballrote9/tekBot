# handlers/analytics_handler.py
from telebot import types
from database.session import SessionLocal
from database.models import (  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
    User, 
    Feedback, 
    Reminder, 
    UserTestProgress, 
    Content,
    Test,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Test
    ContentFile  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç ContentFile
)
from datetime import datetime, timedelta
import pandas as pd
from io import BytesIO

def generate_reminders_report():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º"""
    db = SessionLocal()
    try:
        total_reminders = db.query(Reminder).count()
        active_reminders = db.query(Reminder).filter(Reminder.is_active == True).count()
        missed_reminders = db.query(Reminder).filter(
            Reminder.next_send < datetime.now(),
            Reminder.is_active == True
        ).count()
        
        report = (
            "‚è∞ –û–¢–ß–ï–¢ –ü–û –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø–ú\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_reminders}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {active_reminders}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {missed_reminders}\n"
        )
        
        reminders_data = []
        reminders = db.query(Reminder).all()
        for r in reminders:
            reminders_data.append({
                "ID": r.id,
                "–¢–µ–∫—Å—Ç": r.text[:50] + "..." if len(r.text) > 50 else r.text,
                "–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω–æ" if r.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ",
                "–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞": r.next_send.strftime('%Y-%m-%d %H:%M') if r.next_send else "N/A",
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª": r.interval or "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ"
            })
        
        return report, reminders_data
    finally:
        db.close()

def generate_tests_report():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º"""
    db = SessionLocal()
    try:
        from database.models import Test 
        total_tests = db.query(Test).count()
        completed_tests = db.query(UserTestProgress).filter(
            UserTestProgress.completed == True
        ).count()
        
        report = (
            "üìù –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ê–ú\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {completed_tests}\n"
        )
        
        tests_data = []
        tests = db.query(Test).all()
        for test in tests:
            completed_count = db.query(UserTestProgress).filter(
                UserTestProgress.test_id == test.id,
                UserTestProgress.completed == True
            ).count()
            
            tests_data.append({
                "ID": test.id,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": test.title,
                "–°—Å—ã–ª–∫–∞": test.url,
                "–ü—Ä–æ–π–¥–µ–Ω–æ —Ä–∞–∑": completed_count
            })
        
        return report, tests_data
    finally:
        db.close()

def generate_content_report():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
    from database.content_session import ContentSessionLocal
    db = ContentSessionLocal()
    try:
        from database.models import Content, ContentFile

        total_content = db.query(Content).count()
        total_files   = db.query(ContentFile).count()
        
        report = (
            "üìö –û–¢–ß–ï–¢ –ü–û –ú–ê–¢–ï–†–ò–ê–õ–ê–ú\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {total_content}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n"
        )
        
        content_data = []
        sections = db.query(Content).all()
        for section in sections:
            files_count = len(section.files)
            content_data.append({
                "–†–∞–∑–¥–µ–ª": section.section,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": section.title,
                "–§–∞–π–ª–æ–≤": files_count
            })
        
        return report, content_data
    finally:
        db.close()
        
def show_analytics_menu(bot, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    buttons = [
        types.InlineKeyboardButton("üë• –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="report:users"),
        types.InlineKeyboardButton("üí¨ –û—Ç—á–µ—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º", callback_data="report:feedback"),
        types.InlineKeyboardButton("‚è∞ –û—Ç—á–µ—Ç –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="report:reminders"),
        types.InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º", callback_data="report:tests"),
        types.InlineKeyboardButton("üìö –û—Ç—á–µ—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="report:content"),
        types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="training")
    ]
    
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=markup
    )

def generate_users_report():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    db = SessionLocal()
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.last_activity >= datetime.now() - timedelta(days=7)).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        new_users_today = db.query(User).filter(User.created_at >= datetime.now() - timedelta(days=1)).count()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = (
            "üë• –û–¢–ß–ï–¢ –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {active_users}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {new_users_today}\n"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        users_data = []
        users = db.query(User).all()
        for user in users:
            info = user.user_info  # —Å–≤—è–∑–∞–Ω–Ω—ã–π User_info
            users_data.append({
                "ID": user.id,
                "–ò–º—è": info.full_name if info else "N/A",
                "Email": info.mail if info else "N/A",
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": user.created_at.strftime('%Y-%m-%d'),
                "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": user.last_activity.strftime('%Y-%m-%d %H:%M') if user.last_activity else "N/A"
            })
        
        return report, users_data
    finally:
        db.close()

def generate_feedback_report():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º"""
    db = SessionLocal()
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_feedbacks = db.query(Feedback).count()
        last_week_feedbacks = db.query(Feedback).filter(
            Feedback.created_at >= datetime.now() - timedelta(weeks=1)
        ).count()
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = (
            "üí¨ –û–¢–ß–ï–¢ –ü–û –û–¢–ó–´–í–ê–ú\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_feedbacks}\n"
            f"‚Ä¢ –û—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {last_week_feedbacks}\n"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        feedbacks_data = []
        feedbacks = db.query(Feedback).order_by(Feedback.created_at.desc()).limit(50).all()
        for fb in feedbacks:
            feedbacks_data.append({
                "ID": fb.id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": fb.full_name,
                "–î–∞—Ç–∞": fb.created_at.strftime('%Y-%m-%d %H:%M'),
                "–¢–µ–∫—Å—Ç": fb.feedback_text[:100] + "..." if len(fb.feedback_text) > 100 else fb.feedback_text
            })
        
        return report, feedbacks_data
    finally:
        db.close()

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:
# generate_reminders_report()
# generate_tests_report()
# generate_content_report()

def create_excel_file(data, filename):
    """–°–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    df = pd.DataFrame(data)
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–î–∞–Ω–Ω—ã–µ')
    output.seek(0)
    return output, filename