from telebot import types
import hashlib
from database.models import User, User_info, Authorized_users, Admin, Content
from database.session import SessionLocal
from database.content_session import ContentSessionLocal
from services.sections import SECTIONS
from services.auth_check import check_auth, require_auth

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é 
def show_main_menu(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="info"),
        types.InlineKeyboardButton("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="training"),
        types.InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
        types.InlineKeyboardButton("‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback"),
        types.InlineKeyboardButton("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        types.InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", callback_data="search_emp"),
        types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–º–∫–æ–≤", callback_data="upload_staff"),
    ]
    markup.add(*buttons)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=markup
    )
   
    # –§—É–Ω–∫—Ü—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def greetings(bot, message):
    section = 'greetings'
    db = SessionLocal()
    markup = None
    if (db.query(Admin).filter(message.from_user.id == Admin.auth_token).first()):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f'edit_section:{section}:greetings'))
    db = ContentSessionLocal()
    try:
        content = db.query(Content).filter(Content.section == section).first()
        if content:
            bot.send_message(message.chat.id, f"üìå {content.text}", reply_markup=markup)
        elif markup is not None:
            db.add(Content(
                section=section,
                title=SECTIONS[section]['title'],
                text=SECTIONS[section]['description']
            ))
            db.commit()
            content = db.query(Content).filter(Content.section == section).first()
            bot.send_message(message.chat.id, f"üìå {content.text}", reply_markup=markup)
    finally:
        db.close()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ core.py---
def register_start_handler(bot):
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def handle_password(message, sent=None):
        entered_password = message.text.strip()
        if str(entered_password).lower() in  ["–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–Ω–∞–∑–∞–¥"]:
            bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø–æ—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /start")
            return
        hashed_password = hashlib.sha256(entered_password.encode()).hexdigest()
        telegram_id = message.from_user.id
        found = False
        db = SessionLocal()

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ —á—É–∂–æ–º—É –ø–∞—Ä–æ–ª—é
        auth_user = db.query(Authorized_users).filter(Authorized_users.auth_token == telegram_id).first()
        if auth_user:
            if hashed_password == auth_user.user.hash_pass:
                found = True
                user = auth_user.user
            else: 
                bot.delete_message(message.chat.id, sent.message_id)
                bot.delete_message(message.chat.id, message.message_id)
                sent = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\r\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            
                bot.register_next_step_handler(message, handle_password, sent)
                return
       
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
        if not found:
            user_entry = db.query(User)
            for user in user_entry:
                if hashed_password == user.hash_pass and not user.is_authorized:
                    found = True
                    break

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–Ω–æ–≤–∞
        if not found:
            bot.delete_message(message.chat.id, sent.message_id)
            bot.delete_message(message.chat.id, message.message_id)
            sent = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\r\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            
            bot.register_next_step_handler(message, handle_password, sent)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º auth_token –Ω–∞ telegram_id –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if not user.is_authorized:
            user_info = user.user_info
            user_info.auth_token = str(telegram_id)
            user_info.username = str(message.from_user.username)
            user.auth_token = str(telegram_id)
            user.is_authorized = True
            db.add(Authorized_users(
                auth_token = user.auth_token
            ))

            db.commit()

            bot.delete_message(message.chat.id, sent.message_id)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, {user_info.full_name}!")
            greetings(bot, message)
        else:
            bot.delete_message(message.chat.id, sent.message_id)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, {user.user_info.full_name}!")
            greetings(bot, message)
        db.close()

    
    @bot.message_handler(commands=["start"])
    def send_welcome(message):
        sent = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
        )
        bot.register_next_step_handler(message, handle_password, sent)
    # –ò—Å–ø—Ä–∞–∞–≤–∏—Ç—å
    @bot.message_handler(commands=['profile'])
    def profile(message):
        if not check_auth(bot, message):
            return 
        telegram_id = message.from_user.id
        db = SessionLocal()

        user_info = db.query(User_info).filter(User_info.auth_token == str(telegram_id)).first()

        if user_info:
            bot.reply_to(message,
                f"–§–ò–û: {user_info.full_name}\n"
                f"Email: {user_info.mail}\n"
                f"–û—Ñ–∏—Å: {user_info.office}")
        else:
            bot.reply_to(message, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

        db.close()    

    @bot.message_handler(commands=["menu"])
    @require_auth(bot)
    def show_menu(message):
        show_main_menu(bot, message)
        
    @bot.message_handler(commands=["greetings"])
    @require_auth(bot) 
    def show_greeting(message):
        greetings(bot, message)

    @bot.message_handler(commands=['id'])
    def get_id(message):
        bot.send_message(message.chat.id, f"–í–∞—à ID: {message.from_user.id}")