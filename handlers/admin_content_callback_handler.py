from telebot import types
from services.content_service import update_content, add_file_to_content, delete_content_file, get_content_files
import os
from services.sections import SECTIONS


def register_admin_content_callback_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_section:"))
    def start_edit_section(call):
        section = call.data.split(":", 1)[1]
        info = SECTIONS.get(section)

        if not info:
            bot.answer_callback_query(call.id, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=f"change_title:{section}"),
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"change_text:{section}"),
        ]
        if info.get("allow_file"):
            buttons.append(types.InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"add_file:{section}"))
            buttons.append(types.InlineKeyboardButton("üóÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"view_files:{section}"))

        buttons.append(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="info"))
        markup.add(*buttons)

        bot.send_message(
            chat_id=call.message.chat.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è ¬´{info['title']}¬ª",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("view_files:"))
    def show_files_list(call):
        section = call.data.split(":", 1)[1]
        files = get_content_files(section)

        info = SECTIONS[section]
        markup = types.InlineKeyboardMarkup()

        if not files:
            bot.send_message(call.message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        for file in files:
            btn = types.InlineKeyboardButton(f"üóë {os.path.basename(file.file_path)}", callback_data=f"delete_file:{file.id}")
            markup.add(btn)

        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"edit_section:{section}"))
        bot.send_message(call.message.chat.id, f"üìé –§–∞–π–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{info['title']}¬ª:", reply_markup=markup)

    # --- –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_title:"))
    def request_new_title(call):
        section = call.data.split(":", 1)[1]
        info = SECTIONS[section]
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è ¬´{info['title']}¬ª")
        bot.register_next_step_handler(msg, process_title, section, info)

    def process_title(message, section, info):
        title = message.text.strip()
        update_content(section=section, title=title)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")

    # --- –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_text:"))
    def request_new_text(call):
        section = call.data.split(":", 1)[1]
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(msg, process_text, section)

    def process_text(message, section):
        text = message.text.strip()
        update_content(section=section, text=text)
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")

    # --- –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("add_file:"))
    def request_new_file(call):
        section = call.data.split(":", 1)[1]
        info = SECTIONS[section]
        msg = bot.send_message(call.message.chat.id, f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è ¬´{info['title']}¬ª")
        bot.register_next_step_handler(msg, process_file, section)

    def process_file(message, section):
        if message.document:
            os.makedirs(f"data/{section}", exist_ok=True)

            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            file_name = message.document.file_name
            file_path = f"data/{section}/{file_name}"

            with open(file_path, "wb") as f:
                f.write(downloaded_file)

            add_file_to_content(section=section, file_path=file_path)
            bot.send_message(message.chat.id, "üìé –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–∞–∑–¥–µ–ª—É")
        else:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª")
        
    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_file:"))
    def delete_file(call):
        file_id = int(call.data.split(":", 1)[1])
        deleted = delete_content_file(file_id)
        if deleted:
            bot.send_message(call.message.chat.id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

