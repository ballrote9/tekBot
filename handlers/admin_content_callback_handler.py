from telebot import types
from services.content_service import update_content, add_file_to_content, delete_content_file, get_content_files
import os
from services.sections import SECTIONS
from database.models import Test, UserTestProgress, Admin, User_info
from database.models import CompanyTour
from database.content_session import ContentSessionLocal
from database.session import SessionLocal
from sqlalchemy import func
from datetime import datetime
from services.auth_check import require_auth

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    db = SessionLocal()
    admin = db.query(Admin).filter(Admin.auth_token == str(user_id)).first()
    db.close()
    return admin is not None

def register_admin_content_callback_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_section:"))
    @require_auth(bot)
    def start_edit_section(call):
        _, section, back_path = call.data.split(":")
        info = SECTIONS.get(section)

        if not info:
            bot.answer_callback_query(call.id, "–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        markup = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=f"change_title:{section}"),
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"change_text:{section}"),
        ]
        if info.get("allow_file"):
            buttons.append(types.InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"add_file:{section}"))
            buttons.append(types.InlineKeyboardButton("üóÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"view_files:{section}"))

        buttons.append(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=back_path))
        markup.add(*buttons)

        bot.send_message(
            chat_id=call.message.chat.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è ¬´{info['title']}¬ª",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("view_files:"))
    def show_files_list(call):
        section = call.data.split(":", 1)[1]
        files = get_content_files(section)

        info = SECTIONS[section]
        markup = types.InlineKeyboardMarkup()

        if not files:
            bot.send_message(call.message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        for file in files:
            btn = types.InlineKeyboardButton(f"üóë {os.path.basename(file.file_path)}", callback_data=f"delete_file:{file.id}")
            markup.add(btn)

        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"edit_section:{section}"))
        bot.send_message(call.message.chat.id, f"üìé –§–∞–π–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´{info['title']}¬ª:", reply_markup=markup)

    # --- –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_title:"))
    def request_new_title(call):
        section = call.data.split(":", 1)[1]
        info = SECTIONS[section]
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è ¬´{info['title']}¬ª")
        bot.register_next_step_handler(msg, process_title, section, info)

    def process_title(message, section, info):
        title = message.text.strip()
        update_content(section=section, title=title)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")

    # --- –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("change_text:"))
    def request_new_text(call):
        section = call.data.split(":", 1)[1]
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(msg, process_text, section)

    def process_text(message, section):
        text = message.text.strip()
        update_content(section=section, text=text)
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")

    # --- –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("add_file:"))
    def request_new_file(call):
        section = call.data.split(":", 1)[1]
        info = SECTIONS[section]
        msg = bot.send_message(call.message.chat.id, f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è ¬´{info['title']}¬ª")
        bot.register_next_step_handler(msg, process_file, section)

    def process_file(message, section):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if message.document:
                if message.document.file_size > 50 * 1024 * 1024:  # 50 –ú–ë
                    bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 50 –ú–ë)")
                    return
                file_info = bot.get_file(message.document.file_id)
                file_name = message.document.file_name
            elif message.video:
                if message.video.file_size > 50 * 1024 * 1024:
                    bot.send_message(message.chat.id, "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å. 50 –ú–ë). –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
                    return
                file_info = bot.get_file(message.video.file_id)
                file_name = f"video_{message.video.file_unique_id}.mp4"
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ)")
                return

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            os.makedirs(f"data/{section}", exist_ok=True)
            file_path = f"data/{section}/{file_name}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            with open(file_path, 'wb') as f:
                downloaded = 0
                chunk_size = 1024 * 1024  # 1 –ú–ë
                while downloaded < file_info.file_size:
                    chunk = bot.download_file(file_info.file_path, offset=downloaded, length=chunk_size)
                    f.write(chunk)
                    downloaded += len(chunk)

            add_file_to_content(section=section, file_path=file_path)
            bot.send_message(message.chat.id, f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({file_info.file_size//1024} KB)")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_file:"))
    def delete_file(call):
        file_id = int(call.data.split(":", 1)[1])
        deleted = delete_content_file(file_id)
        if deleted:
            bot.send_message(call.message.chat.id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("add_test:"))
    def request_new_test(call):
        section = call.data.split(":", 1)[1]
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
        bot.register_next_step_handler(msg, process_test_title, section)

    def process_test_title(message, section):
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç (Google Forms –∏ —Ç.–¥.):")
        bot.register_next_step_handler(message, process_test_url, section, message.text)

    def process_test_url(message, section, title):
        if not message.text.startswith("http"):
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            return
        
        from handlers.tests_handler import add_test
        add_test(section, title, message.text)
        bot.send_message(message.chat.id, "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

    @bot.message_handler(commands=['test_stats'])
    def show_test_stats(message):
        if not is_admin(message.from_user.id):
            return
            
        db = ContentSessionLocal()
        stats = db.query(
            Test.title,
            func.count(UserTestProgress.id).filter(UserTestProgress.completed == True)
        ).join(UserTestProgress).group_by(Test.title).all()
        
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:\n\n"
        for title, count in stats:
            response += f"{title}: {count} –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π\n"
            
        bot.send_message(message.chat.id, response)
        db.close()
    @bot.callback_query_handler(func=lambda call: call.data == "edit_section:training_tests")
    def handle_edit_tests(call):
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
        bot.register_next_step_handler(call.message, get_test_title)

    def get_test_title(message):
        title = message.text
        bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç:")
        bot.register_next_step_handler(message, lambda msg: save_test(msg, title))

    def save_test(message, title):
        url = message.text
        from database.models import Test
        from database.content_session import ContentSessionLocal

        db = ContentSessionLocal()
        test = Test(section="training_tests", title=title, url=url)
        db.add(test)
        db.commit()
        db.close()

        bot.send_message(message.chat.id, "‚úÖ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
