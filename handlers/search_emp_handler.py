import html
from telebot import types
from database.models import User, User_info, Authorized_users, Admin, Content
from database.session import SessionLocal
from database.content_session import ContentSessionLocal

def search(bot, call):
    db = SessionLocal()
    section = 'search_emp'
    if (db.query(Admin).filter(call.from_user.id == Admin.auth_token).first()):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f'edit_section:{section}:search_emp'))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    db = ContentSessionLocal()
    content = db.query(Content).filter(Content.section == section).first()
    bot.send_message(call.message.chat.id, f"üìå {content.title}\n{content.text}", reply_markup=markup)
    
    bot.register_next_step_handler(call.message, search_by_fio, bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_cache = {}

def search_by_fio(message, bot):
    try:
        query = message.text.strip()
        if not query:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
            return

        search_parts = [part.lower() for part in query.split() if part]
        db = SessionLocal()
        users = db.query(User_info).all()

        matched_users = [
            user for user in users
            if user.full_name and all(part in user.full_name.lower() for part in search_parts)
        ]
        matched_users.sort(key=lambda u: sum(part in u.full_name.lower() for part in search_parts), reverse=True)

        if not matched_users:
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –ø–æ—Ä—è–¥–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        user_search_cache[message.from_user.id] = {
            'results': [u.id for u in matched_users]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        send_users_paginated_cached(
            bot=bot,
            call_or_message=message,  # ‚Üê message, is_new_message=True –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            users=matched_users,
            page=0,
            is_new_message=True
        )

    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        print(f"Error: {e}")
    finally:
        db.close()


def send_users_paginated_cached(bot, call_or_message, users, page=0, user_id=None, is_new_message=True):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param call_or_message: –º–æ–∂–µ—Ç –±—ã—Ç—å message (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ) –∏–ª–∏ call (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
    :param users: —Å–ø–∏—Å–æ–∫ User_info
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫—ç—à–∞)
    :param is_new_message: —Ñ–ª–∞–≥, –Ω–æ–≤–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    PAGE_SIZE = 5
    total_pages = (len(users) + PAGE_SIZE - 1) // PAGE_SIZE
    start_idx = page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    page_users = users[start_idx:end_idx]

    markup = types.InlineKeyboardMarkup(row_width=3)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []

    if page > 0:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"emp_page:{page - 1}"))

    if end_idx < len(users):
        buttons.append(types.InlineKeyboardButton("‚û°Ô∏è –ï—â—ë", callback_data=f"emp_page:{page + 1}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    for user in page_users:
        markup.add(
            types.InlineKeyboardButton(
                user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏",
                callback_data=f"emp_detail:{user.id}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–Ω–∏–∑
    if buttons:
        markup.row(*buttons)
    else:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî –ø—Ä–æ—Å—Ç–æ "–ó–∞–∫—Ä—ã—Ç—å" –∏–ª–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"))

    text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    if is_new_message:
        bot.send_message(call_or_message.chat.id, text, reply_markup=markup)
    else:
        try:
            bot.edit_message_text(
                chat_id=call_or_message.message.chat.id,
                message_id=call_or_message.message.message_id,
                text=text,
                reply_markup=markup
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)
            pass



def handle_employee_page(call, bot):
    try:
        page = int(call.data.split(":")[1])
        user_id = call.from_user.id

        if user_id not in user_search_cache:
            bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result_ids = user_search_cache[user_id]['results']
        db = SessionLocal()
        users = db.query(User_info).filter(User_info.id.in_(result_ids)).all()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
        id_to_user = {u.id: u for u in users}
        matched_users = [id_to_user[uid] for uid in result_ids if uid in id_to_user]

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π

        send_users_paginated_cached(
            bot=bot,
            call_or_message=call,
            users=matched_users,
            page=page,
            user_id=user_id,
            is_new_message=False
        )

        bot.answer_callback_query(call.id)
    except Exception as e:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        print(f"Error in emp_page: {e}")
    finally:
        db.close()

def handle_employee_detail(call, bot):
    try:
        # –ü–∞—Ä—Å–∏–º ID –∏–∑ –∫–æ–ª–±—ç–∫–∞: emp_detail:<user_info_id>
        user_info_id = int(call.data.split(":")[1])
        db = SessionLocal()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ User_info (—Ç–∞–±–ª–∏—Ü–∞ about_users)
        user_info = db.query(User_info).filter(User_info.id == user_info_id).first()
        if not user_info:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π User –ø–æ id (–Ω–µ user_id!)
        user = db.query(User).filter(User.id == user_info.id).first()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        full_name = user_info.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        #position = user_info.position or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        office = user_info.office or "–ù–µ —É–∫–∞–∑–∞–Ω"
        phone = user_info.officephone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        email = user_info.mail or "–ù–µ —É–∫–∞–∑–∞–Ω"  # –ø–æ–ª–µ mail –≤ about_users
        telegram = f"@{user_info.username}" if user_info.username else "–ù–µ —É–∫–∞–∑–∞–Ω"

        details = (
            f"üë§ <b>–§–ò–û:</b> {html.escape(full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè¢ <b>–û—Ñ–∏—Å:</b> {html.escape(office or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(phone or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚úâÔ∏è <b>Email:</b> {html.escape(email or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üë§ <b>Telegram:</b> {html.escape(telegram or '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )


        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=details,
            reply_markup=markup,
            parse_mode="HTML"
        )

        bot.answer_callback_query(call.id)

    except Exception as e:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        print(f"Error in handle_employee_detail: {e}")
    finally:
        db.close()

def handle_back_to_results(call, bot):
    try:
        user_id = call.from_user.id

        if user_id not in user_search_cache:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_main")
                )
            )
            return

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        result_ids = user_search_cache[user_id]['results']
        db = SessionLocal()
        users = db.query(User_info).filter(User_info.id.in_(result_ids)).all()

        id_to_user = {u.id: u for u in users}
        matched_users = [id_to_user[uid] for uid in result_ids if uid in id_to_user]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        from handlers.search_emp_handler import send_users_paginated_cached
        send_users_paginated_cached(
            bot=bot,
            call_or_message=call,
            users=matched_users,
            page=0,
            is_new_message=False
        )

        bot.answer_callback_query(call.id)

    except Exception as e:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.")
        print(f"Error in handle_back_to_results: {e}")
    finally:
        db.close()