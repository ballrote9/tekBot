from telebot import types
from database.session import SessionLocal
from database.models import Feedback, Admin
import re

def ask_feedback(bot, message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = SessionLocal()
    is_admin = db.query(Admin).filter(Admin.auth_token == str(message.from_user.id)).first() is not None
    db.close()
    
    buttons = [
        types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="give_feedback"),
        types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="take_quiz"),
    ]
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã
    if is_admin:
        buttons.append(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="view_feedbacks"))
    
    buttons.append(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
        reply_markup=markup
    )

def request_feedback_text(bot, call):
    bot.send_message(call.message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    bot.register_next_step_handler(call.message, lambda m: save_feedback(bot, m))

def save_feedback(bot, message):
    try:
        db = SessionLocal()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤
        clean_text = re.sub(r'<[^>]*>', '', message.text)
        
        new_feedback = Feedback(
            user_id=message.from_user.id,
            full_name=message.from_user.full_name,
            feedback_text=clean_text
        )
        db.add(new_feedback)
        db.commit()
        
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
        print(f"Error saving feedback: {e}")
    finally:
        db.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    ask_feedback(bot, message)

def show_feedbacks(bot, call):
    try:
        db = SessionLocal()
        feedbacks = db.query(Feedback).order_by(Feedback.created_at.desc()).limit(20).all()
        
        if not feedbacks:
            bot.send_message(call.message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")
            return
            
        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
        for feedback in feedbacks:
            response += (
                f"üë§ {feedback.full_name} (ID: {feedback.user_id})\n"
                f"üïí {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üí¨ {feedback.feedback_text}\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        max_length = 4000
        if len(response) > max_length:
            parts = [response[i:i+max_length] for i in range(0, len(response), max_length)]
            for part in parts:
                bot.send_message(call.message.chat.id, part)
        else:
            bot.send_message(call.message.chat.id, response)
            
    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤")
        print(f"Error loading feedbacks: {e}")
    finally:
        db.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    ask_feedback(bot, call.message)